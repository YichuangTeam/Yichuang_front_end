{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { MTLLoader } from 'three/addons/loaders/MTLLoader.js';\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\nexport const allBaseObject = [];\n\n// 假设您已经通过某种方式引入了 THREE.js  \n\nfunction getModelLoader(fileType) {\n  switch (fileType) {\n    case 'stl':\n      return new STLLoader();\n    // 注意这里添加了 THREE  \n    case 'gltf':\n    case 'glb':\n      return new GLTFLoader();\n    // 注意这里添加了 THREE  \n    case 'obj':\n      // 对于 .obj 文件，我们返回 null 或一个特殊的标记，因为我们需要单独处理 .obj 和 .mtl  \n      return 'OBJ';\n    // 或者您可以返回一个对象，其中包含加载 .obj 和 .mtl 所需的逻辑  \n    default:\n      throw new Error('Unsupported file type');\n  }\n}\nasync function loadModel(url, baseURL, modelName) {\n  const fileExtension = url.split('.').pop().toLowerCase();\n  let geometryOrScene = null;\n  let meshName = '';\n  if (fileExtension === 'obj') {\n    // 加载 .mtl 和 .obj 文件  \n    const mtlLoader = new MTLLoader();\n    mtlLoader.setPath(baseURL);\n    const materials = await new Promise((resolve, reject) => {\n      mtlLoader.load(`${modelName}.mtl`, resolve, undefined, reject);\n    });\n    const objLoader = new OBJLoader();\n    objLoader.setMaterials(materials);\n    geometryOrScene = await new Promise((resolve, reject) => {\n      objLoader.load(`${modelName}.obj`, resolve, undefined, reject);\n    });\n    meshName = 'objObject';\n  } else {\n    const loader = getModelLoader(fileExtension);\n    if (loader === 'OBJ') {\n      // Handle OBJ case separately since it's a special case here.\n      // Ideally, you would have the actual loader setup for OBJ.\n      // This part should be replaced with actual loading logic.\n      throw new Error('OBJ loading not implemented in this snippet.');\n    } else if (loader instanceof GLTFLoader) {\n      try {\n        const gltf = await loader.loadAsync(url);\n        geometryOrScene = gltf.scene || gltf.scenes[0];\n        meshName = 'gltfObject';\n      } catch (error) {\n        throw error; // Re-throwing the error to be handled outside\n      }\n    } else if (loader instanceof STLLoader) {\n      // Assuming a hypothetical async loading method for STL\n      geometryOrScene = await new Promise((resolve, reject) => {\n        loader.load(url, geometry => {\n          const material = new THREE.MeshStandardMaterial({\n            color: 0x606060\n          });\n          const stlMesh = new THREE.Mesh(geometry, material);\n          resolve(stlMesh);\n        }, undefined, reject);\n      });\n      meshName = 'stlObject';\n    }\n  }\n  if (!geometryOrScene) {\n    throw new Error('No geometry or scene was loaded.');\n  }\n  return {\n    geometryOrScene,\n    meshName\n  };\n}\nloadModel('public/static/girl_model.glb', 'public/static', 'girl_model').then(({\n  geometryOrScene,\n  meshName\n}) => {\n  geometryOrScene.name = meshName;\n  scene.add(geometryOrScene);\n}).catch(error => console.error('Failed to load model:', error));\nconst boxGeometry = new THREE.BoxGeometry(1, 1, 1);\nconst boxMaterial = new THREE.MeshStandardMaterial({\n  color: 0xff0000\n});\nexport const box = new THREE.Mesh(boxGeometry, boxMaterial);\nbox.name = 'box';\nallBaseObject.push(box);","map":{"version":3,"names":["THREE","GLTFLoader","MTLLoader","OBJLoader","allBaseObject","getModelLoader","fileType","STLLoader","Error","loadModel","url","baseURL","modelName","fileExtension","split","pop","toLowerCase","geometryOrScene","meshName","mtlLoader","setPath","materials","Promise","resolve","reject","load","undefined","objLoader","setMaterials","loader","gltf","loadAsync","scene","scenes","error","geometry","material","MeshStandardMaterial","color","stlMesh","Mesh","then","name","add","catch","console","boxGeometry","BoxGeometry","boxMaterial","box","push"],"sources":["D:/A.yichuang/Codespaces/yichuang/front_code/src/components/modelShow/TBaseObject.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { MTLLoader } from 'three/addons/loaders/MTLLoader.js';\r\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\r\nexport const allBaseObject = [];\r\n\r\n// 假设您已经通过某种方式引入了 THREE.js  \r\n\r\nfunction getModelLoader(fileType) {\r\n  switch (fileType) {\r\n    case 'stl':\r\n      return new STLLoader(); // 注意这里添加了 THREE  \r\n    case 'gltf':\r\n    case 'glb':\r\n      return new GLTFLoader(); // 注意这里添加了 THREE  \r\n    case 'obj':\r\n      // 对于 .obj 文件，我们返回 null 或一个特殊的标记，因为我们需要单独处理 .obj 和 .mtl  \r\n      return 'OBJ'; // 或者您可以返回一个对象，其中包含加载 .obj 和 .mtl 所需的逻辑  \r\n    default:\r\n      throw new Error('Unsupported file type');\r\n  }\r\n}\r\n\r\nasync function loadModel(url, baseURL, modelName) {\r\n  const fileExtension = url.split('.').pop().toLowerCase();\r\n  let geometryOrScene = null;\r\n  let meshName = '';\r\n\r\n  if (fileExtension === 'obj') {\r\n    // 加载 .mtl 和 .obj 文件  \r\n    const mtlLoader = new MTLLoader();\r\n    mtlLoader.setPath(baseURL);\r\n    const materials = await new Promise((resolve, reject) => {\r\n      mtlLoader.load(\r\n        `${modelName}.mtl`,\r\n        resolve,\r\n        undefined,\r\n        reject\r\n      );\r\n    });\r\n\r\n    const objLoader = new OBJLoader();\r\n    objLoader.setMaterials(materials);\r\n    geometryOrScene = await new Promise((resolve, reject) => {\r\n      objLoader.load(\r\n        `${modelName}.obj`,\r\n        resolve,\r\n        undefined,\r\n        reject\r\n      );\r\n    });\r\n    meshName = 'objObject';\r\n  } else {\r\n    const loader = getModelLoader(fileExtension);\r\n    if (loader === 'OBJ') {\r\n      // Handle OBJ case separately since it's a special case here.\r\n      // Ideally, you would have the actual loader setup for OBJ.\r\n      // This part should be replaced with actual loading logic.\r\n      throw new Error('OBJ loading not implemented in this snippet.');\r\n    } else if (loader instanceof GLTFLoader) {\r\n      try {\r\n        const gltf = await loader.loadAsync(url);\r\n        geometryOrScene = gltf.scene || gltf.scenes[0];\r\n        meshName = 'gltfObject';\r\n      } catch (error) {\r\n        throw error; // Re-throwing the error to be handled outside\r\n      }\r\n    } else if (loader instanceof STLLoader) {\r\n      // Assuming a hypothetical async loading method for STL\r\n      geometryOrScene = await new Promise((resolve, reject) => {\r\n        loader.load(url, (geometry) => {\r\n          const material = new THREE.MeshStandardMaterial({ color: 0x606060 });\r\n          const stlMesh = new THREE.Mesh(geometry, material);\r\n          resolve(stlMesh);\r\n        }, undefined, reject);\r\n      });\r\n      meshName = 'stlObject';\r\n    }\r\n  }\r\n\r\n  if (!geometryOrScene) {\r\n    throw new Error('No geometry or scene was loaded.');\r\n  }\r\n\r\n  return { geometryOrScene, meshName };\r\n}\r\nloadModel('public/static/girl_model.glb', 'public/static', 'girl_model')\r\n  .then(({ geometryOrScene, meshName }) => {\r\n    geometryOrScene.name = meshName;\r\n    scene.add(geometryOrScene);\r\n  })\r\n  .catch(error => console.error('Failed to load model:', error));\r\nconst boxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\nconst boxMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });\r\nexport const box = new THREE.Mesh(boxGeometry, boxMaterial);\r\nbox.name = 'box';\r\nallBaseObject.push(box);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}