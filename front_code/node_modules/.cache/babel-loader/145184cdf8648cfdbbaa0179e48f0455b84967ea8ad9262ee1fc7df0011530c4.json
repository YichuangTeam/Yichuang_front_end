{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\n// import { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n// import { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader'\n// import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { MTLLoader } from 'three/addons/loaders/MTLLoader.js';\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\nexport const allBaseObject = [];\n\n// 假设您已经通过某种方式引入了 THREE.js  \n\nfunction getModelLoader(fileType) {\n  switch (fileType) {\n    case 'stl':\n      return new STLLoader();\n    // 注意这里添加了 THREE  \n    case 'gltf':\n    case 'glb':\n      return new GLTFLoader();\n    // 注意这里添加了 THREE  \n    case 'obj':\n      // 对于 .obj 文件，我们返回 null 或一个特殊的标记，因为我们需要单独处理 .obj 和 .mtl  \n      return 'OBJ';\n    // 或者您可以返回一个对象，其中包含加载 .obj 和 .mtl 所需的逻辑  \n    default:\n      throw new Error('Unsupported file type');\n  }\n}\nasync function loadModel(url, baseURL, modelName) {\n  const fileExtension = url.split('.').pop().toLowerCase();\n  let loader;\n  let geometryOrScene;\n  let meshName = '';\n  if (fileExtension === 'obj') {\n    // 加载 .mtl 和 .obj 文件  \n    const mtlLoader = new MTLLoader();\n    mtlLoader.setPath(baseURL); // 设置 .mtl 文件的路径  \n    const materials = await new Promise((resolve, reject) => {\n      mtlLoader.load(`${modelName}.mtl`,\n      // 假设 .mtl 文件与 .obj 文件在同一个目录下  \n      function (materials) {\n        materials.preload();\n        resolve(materials);\n      }, undefined,\n      // 进度回调（如果需要）  \n      function (error) {\n        reject(error);\n      });\n    });\n    const objLoader = new OBJLoader();\n    objLoader.setMaterials(materials);\n    geometryOrScene = await new Promise((resolve, reject) => {\n      objLoader.load(`${modelName}.obj`,\n      // 假设 .obj 文件与 .mtl 文件在同一个目录下  \n      function (obj) {\n        resolve(obj);\n      }, undefined,\n      // 进度回调（如果需要）  \n      function (error) {\n        reject(error);\n      });\n    });\n    meshName = 'objObject'; // 注意这里使用了单个 = 进行赋值  \n  } else {\n    loader = getModelLoader(fileExtension);\n    try {\n      if (loader instanceof STLLoader) {\n        const geometry = await loader.loadAsync(url);\n        const material = new THREE.MeshStandardMaterial({\n          color: 0x606060\n        });\n        const stlMesh = new THREE.Mesh(geometry, material);\n        meshName = 'stlObject';\n      } else if (loader instanceof THREE.GLTFLoader) {\n        const gltf = await loader.loadAsync(url);\n        const gltfMesh = gltf.scene ? gltf.scene : gltf.scenes[0];\n        meshName = 'gltfObject';\n        geometryOrScene = gltfMesh;\n      }\n    } catch (error) {\n      // 处理错误  \n    }\n  }\n  return {\n    geometryOrScene,\n    meshName\n  };\n}\nloadModel('public/static/girl_model.glb', 'public/static', 'girl_model').then(({\n  geometryOrScene,\n  meshName\n}) => {\n  geometryOrScene.name = meshName;\n  scene.add(geometryOrScene);\n}).catch(error => console.error('Failed to load model:', error));\nconst boxGeometry = new THREE.BoxGeometry(1, 1, 1);\nconst boxMaterial = new THREE.MeshStandardMaterial({\n  color: 0xff0000\n});\nexport const box = new THREE.Mesh(boxGeometry, boxMaterial);\nbox.name = 'box';\nallBaseObject.push(box);","map":{"version":3,"names":["THREE","GLTFLoader","MTLLoader","OBJLoader","allBaseObject","getModelLoader","fileType","STLLoader","Error","loadModel","url","baseURL","modelName","fileExtension","split","pop","toLowerCase","loader","geometryOrScene","meshName","mtlLoader","setPath","materials","Promise","resolve","reject","load","preload","undefined","error","objLoader","setMaterials","obj","geometry","loadAsync","material","MeshStandardMaterial","color","stlMesh","Mesh","gltf","gltfMesh","scene","scenes","then","name","add","catch","console","boxGeometry","BoxGeometry","boxMaterial","box","push"],"sources":["D:/A.yichuang/Codespaces/front_code/src/components/modelShow/TBaseObject.js"],"sourcesContent":["import * as THREE from 'three';\r\n// import { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\r\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n// import { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader'\r\n// import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { MTLLoader } from 'three/addons/loaders/MTLLoader.js';\r\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\r\nexport const allBaseObject = [];\r\n\r\n// 假设您已经通过某种方式引入了 THREE.js  \r\n\r\nfunction getModelLoader(fileType) {\r\n  switch (fileType) {\r\n    case 'stl':\r\n      return new STLLoader(); // 注意这里添加了 THREE  \r\n    case 'gltf':\r\n    case 'glb':\r\n      return new GLTFLoader(); // 注意这里添加了 THREE  \r\n    case 'obj':\r\n      // 对于 .obj 文件，我们返回 null 或一个特殊的标记，因为我们需要单独处理 .obj 和 .mtl  \r\n      return 'OBJ'; // 或者您可以返回一个对象，其中包含加载 .obj 和 .mtl 所需的逻辑  \r\n    default:\r\n      throw new Error('Unsupported file type');\r\n  }\r\n}\r\n\r\nasync function loadModel(url, baseURL, modelName) {\r\n  const fileExtension = url.split('.').pop().toLowerCase();\r\n  let loader;\r\n  let geometryOrScene;\r\n  let meshName = '';\r\n\r\n  if (fileExtension === 'obj') {\r\n    // 加载 .mtl 和 .obj 文件  \r\n    const mtlLoader = new MTLLoader();\r\n    mtlLoader.setPath(baseURL); // 设置 .mtl 文件的路径  \r\n    const materials = await new Promise((resolve, reject) => {\r\n      mtlLoader.load(\r\n        `${modelName}.mtl`, // 假设 .mtl 文件与 .obj 文件在同一个目录下  \r\n        function (materials) {\r\n          materials.preload();\r\n          resolve(materials);\r\n        },\r\n        undefined, // 进度回调（如果需要）  \r\n        function (error) {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n\r\n    const objLoader = new OBJLoader();\r\n    objLoader.setMaterials(materials);\r\n    geometryOrScene = await new Promise((resolve, reject) => {\r\n      objLoader.load(\r\n        `${modelName}.obj`, // 假设 .obj 文件与 .mtl 文件在同一个目录下  \r\n        function (obj) {\r\n          resolve(obj);\r\n        },\r\n        undefined, // 进度回调（如果需要）  \r\n        function (error) {\r\n          reject(error);\r\n        }\r\n      );\r\n    });\r\n    meshName = 'objObject'; // 注意这里使用了单个 = 进行赋值  \r\n  } else {\r\n    loader = getModelLoader(fileExtension);\r\n    try {\r\n      if (loader instanceof STLLoader) {\r\n        const geometry = await loader.loadAsync(url);\r\n        const material = new THREE.MeshStandardMaterial({ color: 0x606060 });\r\n        const stlMesh = new THREE.Mesh(geometry, material);\r\n        meshName = 'stlObject';\r\n      } else if (loader instanceof THREE.GLTFLoader) {\r\n        const gltf = await loader.loadAsync(url);\r\n        const gltfMesh = gltf.scene ? gltf.scene : gltf.scenes[0];\r\n        meshName = 'gltfObject';\r\n        geometryOrScene = gltfMesh;\r\n      }\r\n\r\n    } catch (error) {\r\n      // 处理错误  \r\n    }\r\n  }\r\n\r\n\r\n  return { geometryOrScene, meshName };\r\n}\r\nloadModel('public/static/girl_model.glb', 'public/static', 'girl_model')\r\n  .then(({ geometryOrScene, meshName }) => {\r\n    geometryOrScene.name = meshName;\r\n    scene.add(geometryOrScene);\r\n  })\r\n  .catch(error => console.error('Failed to load model:', error));\r\nconst boxGeometry = new THREE.BoxGeometry(1, 1, 1);\r\nconst boxMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });\r\nexport const box = new THREE.Mesh(boxGeometry, boxMaterial);\r\nbox.name = 'box';\r\nallBaseObject.push(box);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}